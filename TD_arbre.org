* Exo n°1 

** Question n°1

*** Implémentation 

    Un arbre sera donc composé : 
    - un tableau (tab)
    - La taille du tableau.
    - L'index/Valeur de la racine (sinon on pourrait le retrouver en parcourant le tableau à la recherche de la case contenant la valeur -1 (Soit une comp. temp. O(n) au pire cas, n étant la taille du tableau)).
    - Les noeuds seront donc représentés par leur index. 

*** CreerArbre O(1)

#+BEGIN_SRC C
  Arbre CreerArbre(int taille)
  {
    Arbre a = new Arbre();
    a.tab = int[taille];
    a.taille = taille;
    a.racine = -1; //On ne sait pas encore l'index de la racine lors de l'initialisation de l'arbre
    return a;
  }
#+END_SRC

*** Racine O(1) vu qu'on stock son index

#+BEGIN_SRC C
     int Racine(Arbre a)
   {
     return a.racine;
   }
#+END_SRC

*** FilsNoeud O(n)

#+BEGIN_SRC C
  Liste FilsNoeud(Arbre a,int indexNoeud)
  {
    Liste l = CreerListe();
    for (int i = 0; i < a.taille; i ++)
      {
        if(a.tab[i] == indexNoeud)
          {
            l.insererTeteListe(i);
          }
      }
    return l;
  }
#+END_SRC

*** SontFreres O(1)
#+BEGIN_SRC C
  bool SontFreres(Arbre a, int noeud_x, int noeud_y)
  {
    return a.tab[noued_x] == a.tab[noued_y]; 
  }
#+END_SRC

*** Hauteur O($n^2$)

#+BEGIN_SRC C 
  int Hauteur(Arbre a)
  {
    int h = 0;
    for (int i = 0; i < a.taille; i++)
      {
        int noeudActuelle = i;
        int pere = a.tab[i];
        int h_actuelle = 0;
        while (noeudActuelle != Racine(a))
          {
            noeudActuelle = pere;
            pere = a.tab[pere];
            h_actuelle++;
          }
        if(h_actuelle > h)
          {
            h = h_actuelle;
          }
      }
    return h;
  }  
#+END_SRC

*** SousArbre $O(n^2)$

#+BEGIN_SRC C
    Arbre SousArbre(Arbre a,int noeud_x)
  {
    Arbre b = CreerArbre(a.taille) // Vu que les valeurs de nos noeuds sont représentées par leur index sur le tableau, on ne peut pas optimiser tant que ça la taille du tableau, de plus si on veut travailler dessus après et qu'on raccourci la taille on pourra être bloqué plus rapidement.

     for (int i = 0; i < a.taille; i++)
      {
        int noeudActuelle = i;
        int pere = a.tab[i];
        int sauv_pere = pere;
        while (noeudActuelle != noeud_x || noeudActuelle != racine(a))
          {
            noeudActuelle = pere;
            pere = a.tab[pere];
          }
      if(i == noeud_x)
        {
          b.tab[i] = -1;
        }
      else if(noeudActuelle == noeud_x)
        {
          b.tab[i] = sauv_pere;
        }
      }
return b
  }
#+END_SRC

** Question n°2

Si on utilise cette nouvelle implémentation, on aura (n est la taille de l'arbre): 
- toujours O(1) pour la création de l'arbre
- O(1) pour savoir si 2 noeuds sont frères (on compare juste les pères)
- O(i) pour la liste des fils : i étant le nbr de fils, pour cela il suffira de stocker dans une liste le premier fils du noeud, puis de récupérer le frère de son premier fils et ceux tant que frères n'est pas null.
- O(1) pour récupérer la racine (notre arbre sera composé que d'un unique noeud représentant la racine, il suffit donc de retourner cette variable) 
- O(n) au pire cas --> O(h) pour la hauteur, h étant justement la hauteur de l'arbre, en effet il suffit d'incrémenter une variable tout en parcourant l'arbre de père en fils à l'aide d'une boucle while (la condition et si fils == null et dans ce cas la variable à comme valeur de base 0).
- O(n) au pire cas --> O(a) : a étant la taille du sous arbre souhaité. (On va devoir recopier dans un nouvelle arbre chaque noeud (qui seront eux aussi des copies pour éviter de modifier l'arbre original) avec une première boucle qui va récupérer chaque premier fils et pour chacun de ces noeuds, on va récupérer tous ses frères sans oublier le noeud x qui aura comme père -1).   

* Exo n°2

** Question n°1

On a : 
-8
-3->8
-3->(8 7)
-3->(8->9 7)
-3->(4->(9 8) 7)

** Question n°2
On pourrait utiliser un tableau si on connait la taille max atteignable de notre tas min, cependant à la différence de la table PERE ou la valeur des noeuds était l'index, ici notre tas min peut avoir plusieurs fois la même valeur et donc nous allons être obligé de stocker à la fois le pere mais aussi la valeur du noeud, mais cela nous permet de mettre n'importe quel noeud dans n'importe quel case (on pourrait aussi stocker filsG et filsD mais dans ce cas on se rapproche plus de la question suivante).

** Question n°3

Vu qu'on ne connait pas la place prise par notre tas, utilisait un tableau statique serait une mauvaise idée vu que si notre tableau est trop petit, il faudra tout recopier dans un tableau plus grand (ce qui va prendre beaucoup de temps). Une meilleure solution serait de stocker dans le tas une seule Cellule (la racine), et chaque cellule à accès à son père, son filsG et son filsD (qui sont des cellules) et une valeur .

** Question n°4
   Type du dessus en rajoutant aussi le nombre de noeud (la taille) de la cellule et sa hauteur (pour bien avoir une complexité O(log(n)) pour l'insertion);

** Question n°5 
*** construire-tas O(1)

#+BEGIN_SRC C
    Tas construire-tas()
  {
    Tas t = new Tas();
    t.racine.pere = -1; // pas de père
    return t;
  }
#+END_SRC

*** inserer O(log(n))

#+BEGIN_SRC C
  Tas inserer(Tas t,T val)
  {
    Cellule a = t.racine;
    while (FilsGauche(a) != null || FilsDroit(a) != null)
      {
        Cellule g = FilsGauche(a);
        Cellule d = FilsDroit(a);

        if((d.nbrNoeud == pow(2,d.hauteur+1)-1) && g.hauteur == d.hauteur)
          {
            a.nbrNoeud++;
            a = FilsGauche(a);
          }
        else
          {
            a.nbrNoeud++;
            a = FilsDroit(a);
          }
      }
    a.nbrNoeud++;
    a.hauteur++;
    Cellule h = a;
    while(h.pere != null)
      {
        if (h.pere.hauteur < h.hauteur +1)
          {
            h.pere.hauteur = h.hauteur+1;
          }
        h = h.pere;
      }
    if(FilsGauche(a) == null)
      {

        a.filsGauche = CreerCellule();
        FilsGauche(a).valeur = val+1; 
        FilsGauche(a).pere = a; 
        remplacerCle(FilsGauche(a),val);
      }
    else
      {
        a.filsDroit = CreerCellule();
        FilsDroit(a).valeur = val+1; 
        FilsDroit(a).pere = a; 
        remplacerCle(FilsDroit(a),val);
      }
    return t;
  }  
#+END_SRC

*** entasser-min O(h) = O(log(n))

#+BEGIN_SRC C
  Tas entasserMin (Tas t,cellule r) 
  {
    Cellule min;
    Cellule g = FilsGauche(r);
    Cellule d = FilsDroite(r);
    if (g != NULL && g.valeur <= r.valeur)
      {
        min = g;
      }
    else
      {
        min = r;
      }
    if (d != NULL and d.valeur <= min.valeur)
      {
        min = d;
      }
    if (min != r)
      {
        T tempo = min.valeur;
        min.valeur = r.valeur;
        r.valeur = tempo;
        entasserMin(t,min);
      }
    return t;
  }
#+END_SRC
    
*** minimum O(1)

Juste retourner la valeur de la racine.

*** remplacerCle O(h(x)) ou O(h-h(x))

#+BEGIN_SRC C
  Tas remplacerCle(Tas t,Cellule r,T val)
  {
    if(r.valeur < val)
      {
        r.valeur = val;
        entasserMin(t,r);
      }

    else
      {
        if (r.valeur > val)
          {
            r.valeur = r.pere.valeur;
            r.pere.valeur = val + 1;
            remplacerCle(r.pere,val);
          }
      }
  return t;
  }
#+END_SRC

*** retirerElement O(h)
 
#+BEGIN_SRC C

  retirerElement(Tas t,cellule r)
  {
    Cellule c = t.racine;
    while (filsGauche(c) != null && filsDroite(c) != null) {

      if(FilsGauche(c).nbrNoeud == pow(2,FilsGauche(c).hauteur+1)-1)
        {
          c.nbrNoeud--;
          c = FilsDroite(c);
        }
      else 
        {
          c.nbrNoeud--;
          c = FilsGauche(c);
        }
    }

    if(c == FilsGauche(Pere(c)))
      {
        Pere(c).hauteur--;
      }
    r.valeur = c.valeur;
    free(c);
    entasserMin(t,r);
  }
    #+END_SRC

    

    

** Question n°6 

Pour récupérer la maximum dans un tas min, il va falloir prendre le maximum entre toutes les feuilles, c'est à dire une complexité O(n).

** Question n°7 O(n*log(n))

#+BEGIN_SRC  C
  T[] tri(Tas t)
  {
    n = t.racine.nbrNoeud;
    T[] = new T[n];
    for (int i = 0; i < n; i++)
      {
        t[i] = minimum(t);
        retirerElement(t,t.racine);
      }
    return t;
  }
#+END_SRC


** Question n°8 

Les opérations de la file de priorité sont : insérer,maximum,extraire-max et remplacer, ce qui correspond respectivement avec un tas-max à insérer, maximum, retirerElement(t,t.racine), remplacerCle. 

* Exo n° 3 

** Question n° 1 

Il est assez simple de représenter une expression arithmétique avec un arbre binaire, (surtout avec la notation polonaise --> (2*3) devient (* 2 3)) On va stocker dans la racine la dernière opérations à effectuer, dans son sous arbre gauche l'opération à effectuer avant celle ci et qui va donner l'opérante gauche, de même avec avec la partie droite pour l'opérante droite. Et ceux juqu'au feuilles ou on aura les constantes. Il nous suffira donc d'appeler récursivement depuis la racine et ceux jusqu'au opérations avant les feuilles une méthode *résolution*,puis remonter petit à petit, si on suit cette méthode il n'y a même pas besoin de spécifier les priorités.

** Question n°2 

On va utiliser un parcours en profondeur(suffixe). Si on utilise un parcours préfixe, ou infixe on ne va pas connaître l' opérantes de droite (infixe) voir les deux (préfixe). De même pour le parcours en longueur.

#+BEGIN_SRC C  
  float eval(Arbre a)
  {
    float g,d,retour;
    if(FilsGauche(a).valeur == *opérations*)
      {
        g = eval(ArbreGauche(a));
      }
    else
      {
        g = FilsGauche(a).valeur;
      }
    if(FilsDroit(a).valeur == *opérations*)
      {
        d = eval(ArbreDroit(a));
      }
    else
      {
        d = FilsGauche(a).valeur;
      }
    if(a.racine.valeur == '+')
      {
        retour = g+d;
      }
    // et de même pour toutes les opérations;
    return retour;
  } 

#+END_SRC

** Question n°3 

   Ce sera le même principes avec au noeud soit True Ou false et comme noeud interne Soit OR, AND (2 fils) soit NOT (1 fils), la seule différence est que notre arbre binaire n'est pas forcément parfait ni presque parfait.

#+BEGIN_SRC C
  bool eval(Arbre a)
  {
    bool g,d,retour;
    if(FilsGauche(a).valeur == *opérations*)
      {
        g = eval(ArbreGauche(a));
      }
    else
      {
        g = FilsGauche(a).valeur;
      }
    if(FilsDroit(a) != null)
      {
        if( FilsDroit(a).valeur == *opérations*)
          {
            d = eval(ArbreDroit(a));
          }
        else
          {
            d = FilsGauche(a).valeur;
          }
      }
    if(a.racine.valeur == "AND")
      {
        retour = g && d;
      }
    if(a.racine.valeur == "NOT")
      {
        retour = not g;
      }
    // et de même pour toutes les opérations;
    return retour;
  } 
#+END_SRC

* Exo n°4

** Question n°1

   Récurrence ::: 

   Initialisation :::
   hauteur 0, c'est à dire que x = racine donc il ne peut y avoir qu'un chemin (x -> x)

   Hérédité :::
   Supposons que la propriété est vrai pour tout x de hauteur <= n, c'est à dire qu'il n'existe qu'un seul chemin entre x et la racine r que l'on appellera chm.
   Prenons $x_1$ fils de x, $x_1$ a donc de hauteur n+1, Prouvons qu'il n'existe qu'un seul chemin entre $x_1$ et r.
   La seule direction possible pour $x_1$ allant vers la racine est de passer par son père x, ensuite il ne pourra prendre que le chemin uniqur chm, donc proposition vérifié pour $x_1$.

** Question n°2

      Récurrence ::: 

   Initialisation :::
   noeud 1, c'est à dire qu'il n'y a que la racine, qui est une feuille.

   Hérédité :::
   Supposons que la propriété est vrai pour tout arbre ayant <= n noeud, c'est à dire qu'il y a au moins une feuille dans l'arbre T que l'on va notée f.
   Ajoutons lui un nouveau noeud x, Prouvons qu'il la propriété est toujours vérifier.
   Si x est fils de d, alors f ne sera plus feuille mais x deviendra feuille puisque qu'il n'a pas d'enfants. Sinon f restera feuille. 

** Question n°3

      Récurrence ::: 

   Initialisation :::
   noeud 1, c'est à dire qu'il n'y a que la racine r
   On a donc V = {r} et E = $\emptyset$ => |V| -1 = |E|

   Hérédité :::
   Supposons que la propriété est vrai pour tout arbre ayant <= n noeud.
   Ajoutons lui un nouveau noeud x, Prouvons que la propriété est toujours vérifier.
   Notons p le père de x, V' et E' l'ensemble et relations binaires avant l'ajout de x
   On à donc maintenant $V = V' \bigcup {x}$ et $E = E' \bigcup (p,x)$.
   Donc |V| = |V'| +1 et |E| = |E'| +1 (|V| = |E|).    

** Question n°4

      Récurrence ::: 

   Initialisation :::
   hauteur = 0, c'est à dire qu'il y a 1 feuille pour 1 noeud (1 = 2*1-1)

   Hérédité :::
   Supposons que la propriété est vrai pour tout arbre ayant une hauteur <=  h.
   Prouvons que la propriété est toujours vérifier pour tout arbre binaire de hauteur > h.
   Soit T l'arbre de hauteur h+1 et soit f le nbr de feuilles de l'arbre de hauteur h.
   On à donc maintenant 2*f nbr de feuilles (noté $f_1$) (vu que chaque noeud précédent à maintenant 2 fils) et comme noeuds totale 2*f-1 + $f_1$.
   Soit nbr de noeuds = $f_1$ -1 +$f_1$ => 2*$f_1$-1

** Question n°5

      Récurrence ::: 

   Initialisation :::
   hauteur = 0, c'est à dire qu'il y a qu'une feuille (la racine) (1 <= $2^0$ = 1)

   Hérédité :::
   Supposons que la propriété est vrai pour tout arbre ayant une hauteur <=  h.
   Prouvons que la propriété est toujours vérifier pour tout arbre binaire de hauteur > h.
   Soit T l'arbre de hauteur h+1 et soit f le nbr de feuilles de l'arbre de hauteur h.
   Le nbr de feuilles $f_1$ de l'arbre T sera au maximum f*2 (puisque l'arbre est binaires)
   Donc f \leq $2^h$ ==> 2*f \leq $2^{h+1}$ ==> $f_1 \leq 2^{hauteur(T)}$ 
   
* Exo n°5

** Question n°1

*** 12345678 et 53247681 :

- L'arbre binaire n'existe pas 

*** 12345678 et 432527861

- L'arbre binaire existe (le parcours en longueur donne : 1/ 2 6/ 3 5 7 8/4)



** Question n°2

*** Construction Arbre : 
 - J'ai pris la notation de python pour obtenir des sous-String, sinon il faudrait créer une fonction qui renvoie une sous string en fonction de l'index de départ et d'arrivé et sauvegarder la taille à chaque fois.
 - FindIndexDans(String,char) va renvoyer la position du char dans le String en parcourant le string 
 - Dans cette exo un noeud est représenté par un entier valeur et par 2 noeuds (filsG et filsD), pas besoin du père ici. 
 - Un arbre est donc seulement un noeud que l'on appelle racine.
#+BEGIN_SRC C
      Arbre CreationRacine(String pre,String post)
      {
      Arbre a = CreerArbre();
      a.racine.val = pre[0];
      CreationArbreInterne(a.racine,pre[1:],post[:-1])
      return a;
      }

      void  CreationArbeInterne(Noeud n,String pre,String post)
      {
       if(taille(pre) > 1)
         {
           g = CreerNoeud();
           g.val = pre[0];
           n.filsG = g;
           d = CreerNoeud();
           d.val = post[-1];
           n.filsD = d;

           int posInterPost = FindIndexDans(post,pre[0]);
           int posInterPre = FindIndexDans(pre,post[-1]);

           CreationArbreInterne(g,pre[1:postInterPre],post[0:posInterPost]);
           CreationArbreInterne(d,pre[postInterPre+1:],post[postInerPost+1:-1]);
         }
       else if (taille(pre)> 0)
         {
           g = CreerNoeud();
           g.val = pre[0];
           n.filsG = g;
         }
      }
#+END_SRC

on aurait pu avoir un probleme si notre arbre n'est pas binaire, en effet si on avait eu 12345678 et 432528761, on aurait du avoir 6 -->7 --> 8 et non pas. Il faudrait donc un peu modifier l'algo
+-----+
|  6  |
| / \ |
|7   8|
+-----+
